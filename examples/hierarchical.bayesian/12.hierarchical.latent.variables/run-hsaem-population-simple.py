import sys
# import functools
sys.path.append('./_model/simple_example_Lavielle')
from model import *

import korali


def main():
  # Initialize the distribution
  distrib = SimpleDistributionConditional()
  data = distrib._p.data

  k = korali.Engine()
  e = korali.Experiment()

  e["Problem"]["Type"] = "Bayesian/Latent/HierarchicalCustom"

  ## Warning: The i=i below is necessary to capture the current i.
  ## Just writing
  ##   lambda sample, i: logisticModelFuncdtion(sample, x_vals[i])
  ## will capture i by reference and thus not do what is intended.

  func_list = []
  for i in range(distrib._p.nIndividuals):
    func_list.append(lambda sample, i=i: distrib.conditional_p(sample, data[i]))
  e["Problem"]["Log Likelihood Functions"] = func_list

  e["Problem"]["Latent Space Dimensions"] = 1

  e["Solver"]["Type"] = "HSAEM"
  e["Solver"]["Number Samples Per Step"] = 5
  e["Solver"]["mcmc Outer Steps"] = 1
  e["Solver"]["N1"] = 2
  e["Solver"]["N2"] = 2
  e["Solver"]["N3"] = 2
  e["Solver"]["Termination Criteria"]["Max Generations"] = 50

  e["Distributions"][0]["Name"] = "Uniform 0"
  e["Distributions"][0]["Type"] = "Univariate/Uniform"
  e["Distributions"][0]["Minimum"] = -100
  e["Distributions"][0]["Maximum"] = 100

  # * Define the variables:
  #   We only define one prototype latent variable vector (one-dimensional here) for individual 0.
  #   The others will be automatically generated by Korali, as well as all hyperparameters.
  e["Variables"][0]["Name"] = "latent variable mean"
  e["Variables"][0]["Latent Variable Distribution Type"] = "Normal"
  e["Variables"][0]["Initial Value"] = -5
  e["Variables"][0]["Prior Distribution"] = "Uniform 0"

  e["File Output"]["Frequency"] = 1
  e["File Output"]["Path"] = "_korali_result_simple_hsaem/"
  e["Console Output"]["Frequency"] = 10
  e["Console Output"]["Verbosity"] = "Detailed"

  k.run(e)

  print("------------ Experiment finished ------------\n")
  print("   Compare results to true optimizer in ")
  print("     '_data/simple_example_Lavielle/data_925_info.txt' ")
  print("   Plot experiment stats with: ")
  print("     'python3 -m korali.plotter'")


if __name__ == '__main__':
  # # ** For debugging, try this: **
  # import sys, trace
  # sys.stdout = sys.stderr
  # tracer = trace.Trace(trace=1, count=0, ignoredirs=["/usr", sys.prefix])
  # tracer.runfunc(main)
  # # ** Else: **
  main()
