{

 "Configuration Settings":
 [
   {
    "Name": [ "Conditional Log Likelihood Function" ],
    "Type": "std::function<void(korali::Sample&)>",
     "Description": "This function should access sample['Latent Variables'], and from it calculate the conditional log likelihood of the data, given the latent variables. The total log-likelihood will be calculated as this plus the log-probability of the latent variables (calculated internally)."
  }
 ],

 "Compatible Solvers": [ "SAEM" ],
 
 "Results":
 [
 ],
 
  "Available Operations":
 [
  {
   "Name": "Evaluate Conditional logLikelihood",
   "Description": "Evaluates the 'Conditional Log Likelihood Function' set by the user. Expects parameter 'Latent Variables' to be set.",
   "Function": "evaluateConditionalLoglikelihood",
   "Results": [ { "Name": "Conditional logLikelihood", "Description": "Contains a single value, the evaluation of the function defined by the user." } ]
  },
  {
   "Name": "Check Feasibility",
   "Description": "Determines whether a proposed sample is feasible, given the problem description.",
   "Function": "isSampleFeasible",
   "Results": [ { "Name": "Evaluation", "Description": "Contains a boolean indicating whether the sample is feasible or not." } ]
  },
  {
   "Name": "Evaluate logPrior",
   "Function": "evaluateLogPrior",
   "Description": "Evaluates the logPrior of the sample.",
   "Results": [ { "Name": "logPrior", "Description": "Contains a single number with the log prior evaluation of the sample." } ]
  },
  {
   "Name": "Evaluate logLikelihood",
   "Function": "evaluateLogLikelihood",
   "Description": "Evaluates the logLikelihood of the sample.",
   "Results": [ { "Name": "logLikelihood", "Description": "Contains a single number with the log likelihood evaluation of the sample." } ]
  },
  {
   "Name": "Evaluate logPosterior",
   "Function": "evaluateLogPosterior",
   "Description": "Evaluates the logLikelihood of the sample.",
   "Results": [ { "Name": "logPosterior", "Description": "Contains a single number with the log posterior evaluation of the sample." } ]
  }
 ],
 
 "Variables Configuration":
 [
   {
    "Name": [ "Latent Variable Distribution Type" ],
    "Type": "std::string",
    "Options": [
                { "Value": "NA", "Description": "For hyperparameters, we do not need any assumptions about their distribution." },
                { "Value": "Normal", "Description": "Assume this latent variable is distributed normally." },
                { "Value": "Log-Normal", "Description": "Assume the log of this latent variable is distributed normally." },
                { "Value": "Logit-Normal", "Description": "Assume the logit (log(t/(1-t))) of this latent variable is distributed normally." }
               ],
    "Description": "For latent variables. We use a restricted hierarchical model, where latent variables can follow either a normal, a log-normal or a logit-normal distribution. Hyperparameters will be determined automatically as mean and covariance of the underlying normally distributed variables."
   }
 ],
 
 "Internal Settings":
 [
   {
    "Name": [ "Internal Setting 1" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Internal Setting."
   }
 ],
 
 "Module Defaults":
 {
   "Example Setting 1": 3.14,
   "Example Setting 2": "Hello, World!",
   "Example Setting 3": true,
   "Example Setting 4": "Option 2",
   "Example Setting 5": 510,
   "Example Setting 6": [ 1.00, 2.00, 3.00 ],
   "Internal Setting 1": [ [ 0 ], [ 0 ] ]
 },
 
 "Variable Defaults":
 {
  "Bayesian Type": "Latent"
 }
}
