{

 "Configuration Settings":
 [
   {
    "Name": [ "Conditional Log Likelihood Function" ],
    "Type": "std::function<void(korali::Sample&)>",
     "Description": "This function should access sample['Latent Variables'], and from it calculate the conditional log likelihood of the data, given the latent variables. It will be returned in sample['Conditional LogLikelihood']. Returned values do not need to integrate to 1. The total log-likelihood will be calculated as this plus the log-probability of the latent variables (calculated internally)."
  }
 ],

 "Compatible Solvers": [ "HSAEM" ],
 
 "Results":
 [
 ],
 
  "Available Operations":
 [
  {
   "Name": "Evaluate Conditional LogLikelihood",
   "Description": "Evaluates the 'Conditional (Data) Log Likelihood Function' set by the user. Expects parameter 'Latent Variables' to be set. Might be unnormalized.",
   "Function": "evaluateConditionalLoglikelihood",
   "Results": [ { "Name": "Conditional LogLikelihood", "Description": "Contains a single value, the evaluation of the function defined by the user." } ]
  },
  {
   "Name": "Check Feasibility",
   "Description": "Determines whether a proposed sample is feasible, given the problem description.",
   "Function": "isSampleFeasible",
   "Results": [ { "Name": "Evaluation", "Description": "Contains a boolean indicating whether the sample is feasible or not." } ]
  },
  {
   "Name": "Evaluate logPrior",
   "Function": "evaluateLogPrior",
   "Description": "Evaluates the logPrior of the sample.",
   "Results": [ { "Name": "logPrior", "Description": "Contains a single number with the log prior evaluation of the sample." } ]
  },
  {
   "Name": "Evaluate LogLikelihood",
   "Function": "evaluateLoglikelihood",
   "Description": "Evaluates the loglikelihood of the sample.",
   "Results": [ { "Name": "LogLikelihood", "Description": "Contains a single number with the log likelihood evaluation of the sample." } ]
  },
  {
   "Name": "Evaluate logPosterior",
   "Function": "evaluateLogPosterior",
   "Description": "Evaluates the loglikelihood of the sample.",
   "Results": [ { "Name": "logPosterior", "Description": "Contains a single number with the log posterior evaluation of the sample." } ]
  }
 ],
 
 "Variables Configuration":
 [
   {
    "Name": [ "Latent Variable Distribution Type" ],
    "Type": "std::string",
    "Options": [
                { "Value": "NA", "Description": "For hyperparameters, we do not need any assumptions about their distribution." },
                { "Value": "Normal", "Description": "Assume this latent variable is distributed normally." },
                { "Value": "Log-Normal", "Description": "Assume the log of this latent variable is distributed normally." },
                { "Value": "Logit-Normal", "Description": "Assume the logit (log(t/(1-t))) of this latent variable is distributed normally." }
               ],
    "Description": "For latent variables. We use a restricted hierarchical model, where latent variables can follow either a normal, a log-normal or a logit-normal distribution. Hyperparameters will be determined automatically as mean and covariance of the underlying normally distributed variables."
   },
   {
    "Name": [ "Latent Space Coordinate" ],
    "Type": "int",
    "Description": "This is used to assing the same hyperparameters (mean of the transformed, normal variable) to multiple variables. I.e., it is assumed that all latent variables with same distribution index were drawn from the same distribution."
   },
   {
    "Name": [ "Individual Index" ],
    "Type": "int",
    "Description": "(Transformed) latent variables are assumed to be multiple vectors, z_i, each drawn from the same distribution. That is, each latent variable (z_i)_j belongs to one 'individual' index i, and one coordinate of z_i, the distribution index j."
   }
 ],

   "Internal Settings":
 [
   {
     "Name": ["Hyperparameters Mean"],
     "Type": "std::vector<korali::Variable*>",
     "Description": "Hyperparameters representing the means (mean of all normal distributions of the transformed latent variables)"
   },
   {
     "Name": ["Hyperparameters Covariance"],
     "Type": "std::vector<korali::Variable*>",
     "Description": "Hyperparameters representing the covariance (of the joint normal distribution of the transformed latent variables)"
   },
   {
     "Name": ["Latent Variable Distributions"],
     "Type": "std::map<int, std::string>",
     "Description": "Will map each user-set 'Distribution Index' to its 'Distribution Type', and the name of one of its variables (for better overview, which one is which). Each 'Distribution Index' corresponds to one 'mean' hyperparameter, i.e. the dimension of the normal distribution that defines the distribution of the latent variables, p(latent | hyperparameters)."
   },
   {
     "Name": ["Latent To Hyperparameter Mapping"],
     "Type": "std::map<int, int>",
     "Description": "Todo: Remove. Maps each latent variable index to an index of one of the mean variables among the hyperparameters. This second index is *not* the Distribution Index, but the index in our internal list of means."
   },
   {
     "Name": ["Latent To Individual Mapping"],
     "Type": "std::map<int, int>",
     "Description": "Todo: Remove. Maps each latent variable index to an index of an 'individual'. "
   },
   {
     "Name": ["Latent Index"],
     "Type": "std::vector<std::vector<int>>",
     "Description": "A matrix containing the latent variable indices, so that at mat[i,j] you find the index of the j-th coordinate of latent variable z_i. That is, i is the individual-index, j the distribution index."
   },
   {
     "Name": ["Latent Space Dimensions"],
     "Type": "int",
     "Description": "The dimension of the normal distribution that makes up p(latent | hyperparameters).  Equal to [Latent To Hyperparameter Mapping].size(). Can be seen as the dimension of the latent variables. (Is not equal to the number of latent variables.)"
   },
   {
     "Name": ["Number Individuals"],
     "Type": "int",
     "Description": "The latent variables can be vectors"
   },
   {
     "Name": ["Normal Latent Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the normally distributed latent variables among all variables"
   },
   {
     "Name": ["Lognormal Latent Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the log-normally distributed latent variables among all variables (whose log is normally distributed)"
   },
   {
     "Name": ["Logitnormal Latent Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the logit-normally distributed latent variables among all variables (whose logit, i.e. p/(1-p) is normally distributed"
   },
   {
     "Name": ["Hyperparameter Mean Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the hyperparameters representing the mean (mean of the distribution of the latent variables) among all variables"
   },
   {
     "Name": ["Hyperparameters Cov Indices"],
     "Type": "std::vector<std::vector<size_t>>",
     "Description": "Indices to find the hyperparameters representing the covariance matrix entries (covariance of the distribution of the latent variables) among all variables. The indices are arranged in a matrix, s.t. entry [i][j] finds the index of cov[i][j]."
   }
 ],
 
 "Module Defaults":
 {
 },
 
 "Variable Defaults":
 {
  "Bayesian Type": "Latent",
   "Individual Index" : 0,
   "Distribution Index": 0
 }
}
