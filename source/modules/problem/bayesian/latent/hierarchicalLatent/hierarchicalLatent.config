{

 "Configuration Settings":
 [
   {
    "Name": [ "Conditional Log Likelihood Function" ],
    "Type": "std::function<void(korali::Sample&)>",
     "Description": "This function should access sample['Latent Variables'] (containing a single value for each of the latent space dimensions) and sample['Data Point'], and from it calculate the conditional log likelihood of this data, given the latent variables. It will be returned in sample['Conditional LogLikelihood']. Returned values do not need to integrate to 1. The total log-likelihood will be calculated as the sum of the conditional loglikelihoods of each data point, plus the log-probability of the latent variables (calculated internally)."
  },
   {
    "Name": [ "Data Dimensions" ],
    "Type": "size_t",
     "Description": "Number of coordinates of one data point."
  },
   {
    "Name": [ "Data" ],
    "Type": "std::vector<std::vector<std::vector<double>>>",
     "Description": "Vector of vectors of data 'points'. One vector per individual, containing one or more data points. Data points are also represented as vectors and must have the same length."
  },
   {
    "Name": [ "Number Individuals" ],
    "Type": "size_t",
     "Description": "How many different latent variable vectors are there. Each latent variable vector is treated as belonging to one 'individual'. All those vectors are assumed to be drawn from the same distribution."
  },
   {
    "Name": [ "Latent Space Dimensions" ],
    "Type": "size_t",
     "Description": "Number of coordinates of one latent variable vector. The dimension of the normal distribution that makes up p(latent | hyperparameters)."
  },
   {
    "Name": [ "Initial Variance" ],
    "Type": "double",
     "Description": "With what values on the diagonal the covariance matrix* will be initialized (* part of the hyperparameters, together with the mean variables defines the transformed-normal distribution p(latent | hyperparameters))  ."
  }
 ],

 "Compatible Solvers": [ "HSAEM", "Executor2" ],
 
 "Results":
 [
 ],
 
  "Available Operations":
 [
  {
   "Name": "Evaluate LogLikelihood Single",
   "Description": "Evaluates the 'Conditional (Data) Log Likelihood Function' set by the user. Expects parameter 'Latent Variables' (a vector) and 'Data Point' (a vector) to be set. Might be unnormalized.",
   "Function": "evaluateLoglikelihoodSingle",
   "Results": [ { "Name": "Conditional LogLikelihood", "Description": "Contains a single value, the evaluation of the function defined by the user." } ]
  },
  {
   "Name": "Evaluate logPrior",
   "Function": "evaluateLogPrior",
   "Description": "Evaluates the logPrior of the sample.",
   "Results": [ { "Name": "Log Prior", "Description":  "Contains a vector of numbers, each with the log prior evaluation of one individual." } ]
  },
  {
   "Name": "Evaluate logLikelihood",
   "Function": "evaluateLoglikelihood",
   "Description": "Evaluates the loglikelihood of the sample.",
   "Results": [ { "Name": "Log Likelihood", "Description": "Contains a vector of numbers, each the log likelihood evaluation of data for one individual." } ]
  },
  {
   "Name": "Evaluate logPosterior",
   "Function": "evaluateLogPosterior",
   "Description": "Evaluates the loglikelihood of the sample.",
   "Results": [ { "Name": "Log Posterior", "Description": "Contains a single number with the log posterior evaluation of the sample." } ]
  }
 ],
 
 "Variables Configuration":
 [
   {
    "Name": [ "Latent Variable Distribution Type" ],
    "Type": "std::string",
    "Options": [
                { "Value": "NA", "Description": "For hyperparameters, we do not need any assumptions about their distribution." },
                { "Value": "Normal", "Description": "Assume this latent variable is distributed normally." },
                { "Value": "Log-Normal", "Description": "Assume the log of this latent variable is distributed normally." },
                { "Value": "Logit-Normal", "Description": "Assume the logit (log(t/(1-t))) of this latent variable is distributed normally." }
               ],
    "Description": "For latent variables. We use a restricted hierarchical model, where latent variables can follow either a normal, a log-normal or a logit-normal distribution. Hyperparameters will be determined automatically as mean and covariance of the underlying normally distributed variables."
   },
   {
    "Name": [ "Initial Value" ],
    "Type": "double",
    "Description": "Defines the initial value from which a solver can start looking for the optimum. Implementation note: This is required to set up the sub-problem - these variables need to already be set from the problem side to be able to copy them over to the sub-problem."
   }
 ],

   "Internal Settings":
 [
   {
     "Name": ["Hyperparameters Mean"],
     "Type": "std::vector<korali::Variable*>",
     "Description": "Hyperparameters representing the means (mean of all normal distributions of the transformed latent variables)"
   },
   {
     "Name": ["Hyperparameters Covariance"],
     "Type": "std::vector<korali::Variable*>",
     "Description": "Hyperparameters representing the covariance (of the joint normal distribution of the transformed latent variables)"
   },
   {
     "Name": ["Latent Variable Distributions"],
     "Type": "std::map<size_t, std::string>",
     "Description": "Will map each user-set 'Distribution Index' to its 'Distribution Type', and the name of one of its variables (for better overview, which one is which). Each 'Distribution Index' corresponds to one 'mean' hyperparameter, i.e. the dimension of the normal distribution that defines the distribution of the latent variables, p(latent | hyperparameters)."
   },
   {
     "Name": ["Latent To Hyperparameter Mapping"],
     "Type": "std::map<size_t, size_t>",
     "Description": "Todo: Remove. Maps each latent variable index to an index of one of the mean variables among the hyperparameters. This second index is *not* the Distribution Index, but the index in our internal list of means."
   },
   {
     "Name": ["Latent To Individual Mapping"],
     "Type": "std::map<size_t, size_t>",
     "Description": "Todo: Remove. Maps each latent variable index to an index of an 'individual'. "
   },
   {
     "Name": ["Latent Index"],
     "Type": "std::vector<std::vector<size_t>>",
     "Description": "A matrix containing the latent variable indices, so that at mat[i,j] you find the index of the j-th coordinate of latent variable z_i. That is, i is the individual-index, j the distribution index."
   },
   {
     "Name": ["Normal Latent Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the normally distributed latent variables among all variables"
   },
   {
     "Name": ["Lognormal Latent Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the log-normally distributed latent variables among all variables (whose log is normally distributed)"
   },
   {
     "Name": ["Logitnormal Latent Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the logit-normally distributed latent variables among all variables (whose logit, i.e. p/(1-p) is normally distributed"
   },
   {
     "Name": ["Hyperparameter Mean Indices"],
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the hyperparameters representing the mean (mean of the distribution of the latent variables) among all variables"
   },
   {
     "Name": ["Hyperparameters Cov Indices"],
     "Type": "std::vector<std::vector<size_t>>",
     "Description": "Indices to find the hyperparameters representing the covariance matrix entries (covariance of the distribution of the latent variables) among all variables. The indices are arranged in a matrix, s.t. entry [i][j] finds the index of cov[i][j]."
   }
 ],
 
 "Module Defaults":
 {
   "Initial Variance": 1.0
 },
 
 "Variable Defaults":
 {
  "Bayesian Type": "Latent"
 }
}
