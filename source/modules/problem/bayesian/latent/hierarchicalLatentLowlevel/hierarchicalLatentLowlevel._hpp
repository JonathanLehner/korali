#ifndef _KORALI_PROBLEM_HIERARCHICALLATENTLOWLEVEL_HPP_
#define _KORALI_PROBLEM_HIERARCHICALLATENTLOWLEVEL_HPP_

#include "modules/problem/bayesian/latent/latent.hpp"
#include "modules/problem/bayesian/bayesian.hpp"

//#include <memory>

namespace korali {
namespace problem {
namespace bayesian {
namespace latent {

class HierarchicalLatentLowlevel : public korali::problem::bayesian::Latent
{
 private:
// // local variables, but we don't want to re-allocate space at every use (or do we?)
//  gsl_matrix* covMatrixGSL;
//  gsl_matrix* chol;
//  gsl_vector *latent_minus_mean;
//  gsl_vector* x;

//  void initializeGSLVariables(int nLatent);

 public:

 /**
  * @brief The problem initialization; here, create hyperparameter variables and set up index lists to
           find both types of variables
 */
 void initialize() override;

 /**
  * @brief De-allocate both vectors with hyperparameter korali-variables
 */
 ~HierarchicalLatentLowlevel(void);

 /**
  * @brief TODO
 */
 void evaluateLoglikelihood(korali::Sample& sample) override;


// /**
//  * @brief Evaluate the sufficient statistics, sufficient for determining the hyperparameters.
//        Not necessarily equal to the 'sufficient statistics' of an exponential family distribution.
//        sample is expected to contain parameter 'Latent Variables'
// */
// void evaluateS(korali::Sample& sample);

  /**
  * @brief Evaluate the user-defined function giving the conditional log-likelihood of the data, given some
           values for the latent variables. See the description of this function for more information.
           (It will set "Conditional LogLikelihood" and use "Latent Variables".)
 */
 void evaluateConditionalLoglikelihood(korali::Sample& sample);


};


} // namespace latent
} // namespace bayesian
} // namespace problem
} // namespace korali


#endif // _KORALI_PROBLEM_HIERARCHICALLATENTLOWLEVEL_HPP_
