#include "modules/problem/bayesian/latent/latent.hpp"
#include "modules/problem/bayesian/bayesian.hpp"
#include <vector>

/* The problem initialization; just calls the initialization from Bayesian. */
void korali::problem::bayesian::Latent::initialize()
{
  korali::problem::Bayesian::initialize();
}

/* Class considered abstract; do not use. */
void korali::problem::bayesian::Latent::evaluateLoglikelihood(korali::Sample& sample)
{
  KORALI_LOG_ERROR("'Latent' is an abstract class; use 'Exponential Latent' or 'Hierarchical Latent'.");
}


/* Class considered abstract; do not use. */
void korali::problem::bayesian::Latent::evaluateLogPosterior(korali::Sample& sample)
{
  KORALI_LOG_ERROR("'Latent' is an abstract class; use 'Exponential Latent' or 'Hierarchical Latent'.");
}

/* Class considered abstract; do not use. */
void korali::problem::bayesian::Latent::evaluateLogPrior(korali::Sample& sample)
{
  KORALI_LOG_ERROR("'Latent' is an abstract class; use 'Exponential Latent' or 'Hierarchical Latent'.");
}

} // namespace bayesian

} // namespace problem

} // namespace korali
