#ifndef _KORALI_PROBLEM_EXPONENTIALLATENT_HPP_
#define _KORALI_PROBLEM_EXPONENTIALLATENT_HPP_

#include "modules/problem/bayesian/latent/latent.hpp"


namespace korali { namespace problem { namespace bayesian { namespace latent {

class ExponentialLatent : public korali::problem::bayesian::Latent
{
 public:

  /**
  * @brief Given 'Hyperparameters' and 'Latent Variables' (parameters the sample is expected to have), calculate the total log likelihood.
  * @param sample inputSample
  */
  void evaluateLoglikelihood(korali::Sample &sample) override;

  /*! @brief run the user defined sampler.
      @param sample contains [Hyperparameters] and [Number Samples].
      @param sample needs to contain:
      - sample["Hyperparameters"]
      - sample["Number Samples"]

    Values that will be set:
      - sample["Samples"]
   */
  void sampleLatent(korali::Sample &sample);
  /**
   * @brief Evaluate the user-defined 'S' function (the sufficient statistics of the distribution).
   * @param sample sample is expected to contain parameter ['Latent Variables'].
   */
  void evaluateS(korali::Sample &sample);
  /**
   * @brief Evaluate the user-defined 'phi' function (log-llh = -zeta + <S, phi>).
   * @param sample input sample, is expected to contain parameter ['Hyperparameters'].
   */
  void evaluatePhi(korali::Sample &sample);
  /**
   * @brief Evaluate the user-defined 'zeta' function (~ the log-normalization constant of the distribution).
   * @param sample is expected to contain parameter ['Hyperparameters'].
   */
  void evaluateZeta(korali::Sample &sample);

 // void evaluateLogPrior(korali::Sample& sample) override;
 // void evaluateLogPosterior(korali::Sample& sample) override;
  /**
   *  @brief The problem initialization; here, remember indices of latent vs. hyperparameters for easy access later on
   */
  void initialize() override;

};

} } } } // namespace korali::problem::evaluation::bayesian::latent::exponentialLatent


#endif // _KORALI_PROBLEM_EXPONENTIALLATENT_HPP_
