#ifndef _KORALI_SOLVER_HSAEM_HPP_
#define _KORALI_SOLVER_HSAEM_HPP_

#include "modules/solver/solver.hpp"
#include "modules/problem/bayesian/latent/hierarchicalLatent/hierarchicalLatent.hpp"

namespace korali { namespace solver {

class HSAEM : public korali::Solver
{
 public:

 korali::problem::bayesian::latent::HierarchicalLatent* _latentProblemWrapper;
 korali::problem::bayesian::latent::HierarchicalLatentLowlevel* _latentProblem;

  /**
  * @brief Draw samples of all latent variables, using a Metropolis-Hastings method.
  *        Uses the same proposal distributions as described in chapter 9.3 of
  *        "Mixed Effect Models for the Population Approach" by Marc Lavielle.
  *         TODO: If enabled, uses simulated annealing.
  */
 void sampleLatent();

 void updateS();
 void updateHyperparameters();
 void updateCholesky();

   /**
  * @brief initial things to run to test the hierarchical latent problem class
  */
  void justTesting();

 bool isLatent(int idx);
 std::vector<double> meanAndSDev(std::vector<double> v);
 std::vector<std::vector<double> > transpose(const std::vector<std::vector<double> > data);

// void finalize() override;


 /* @brief This is always run before (re-)starting the solver */
 void initialize() override;

 /* @brief Run once, before the first generation */
 void setInitialConfiguration() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;

};

} } // namespace korali::solver


#endif // _KORALI_SOLVER_HSAEM_HPP_
